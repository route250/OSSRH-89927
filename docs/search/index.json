[{"content":"JavaScriptで変数を宣言する方法には、letとvarがあります。これらはどちらも変数を宣言するためのキーワードですが、実は大きな違いがあります。この記事では、letとvarの違いについて解説します。\nまず、varは関数スコープであるのに対して、letはブロックスコープです。関数スコープとは、変数を宣言した関数内で有効であるということです。一方、ブロックスコープとは、変数を宣言したブロック（中括弧で囲まれた範囲）内でのみ有効であるということです。つまり、letで宣言した変数は、そのブロック内でしか使えないということです。\n以下の例を見てみましょう。\nfunction example() { var x = 1; if (true) { var x = 2; console.log(x); // 2が出力される } console.log(x); // 2が出力される } この場合、xはvarを使って宣言されています。ifブロックの内側で再度宣言されているため、console.log(x)の出力は2となります。そして、ifブロックの外側でもconsole.log(x)が呼ばれているため、再度2が出力されます。\n一方、letを使った場合はどうでしょうか。\nfunction example() { let x = 1; if (true) { let x = 2; console.log(x); // 2が出力される } console.log(x); // 1が出力される } この場合、ifブロック内で宣言されたxは別の変数として扱われます。そのため、最初のconsole.log(x)の出力は2となりますが、ifブロックの外側のxは異なる変数であり、値は1となります。\n以上のように、letとvarの違いはスコープの扱い方にあります。可能であればletを使い、varを使う必要がある場合は注意深くスコープを考えて使うようにしましょう。\n","date":"2023-04-21T02:12:20+09:00","permalink":"https://route250.github.io/p/let-%E3%81%A8-var-%E3%81%AF%E4%BD%95%E3%81%8C%E9%81%95%E3%81%86/","title":"let と var は何が違う？"},{"content":"JavaScriptにおいて、比較演算子には== と === の2つがあります。これらの演算子は、異なる型の値を比較する際に異なる振る舞いをします。\n== 比較演算子は、比較する値の型が異なる場合に、自動的に型変換を行ってから値を比較します。例えば、1 == \u0026lsquo;1\u0026rsquo; のように数値と文字列を比較する場合、文字列の \u0026lsquo;1\u0026rsquo; を数値 1 に変換してから比較します。そのため、この場合 true が返されます。\nしかし、== 比較演算子は型変換によって予期せぬ挙動が生じる可能性があるため、使用には注意が必要です。例えば、0 == false のような比較では、false が数値 0 に変換されてから比較されるため、true が返されます。これは予期せぬ結果であるため、=== 比較演算子を使用することが推奨されます。\n=== 比較演算子は、比較する値の型が異なる場合でも、型変換を行いません。そのため、1 === \u0026lsquo;1\u0026rsquo; のような比較では、型が異なるために false が返されます。=== 比較演算子は、型が一致する場合に限り値を比較するため、より厳密な比較が可能です。\n一般的には、可能な限り === 比較演算子を使用することが推奨されます。ただし、== 比較演算子を使用する必要がある場合は、その挙動を理解してから使用するようにしましょう。\n","date":"2023-04-21T02:04:28+09:00","permalink":"https://route250.github.io/p/%E6%AF%94%E8%BC%83%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE-%E3%81%A8-%E3%81%AF%E4%BD%95%E3%81%8C%E9%81%95%E3%81%86/","title":"比較演算子の == と === は何が違う？"},{"content":"lsコマンド 説明 lsコマンドは、Linux/Unixシステムでファイルやディレクトリのリストを表示するために使用されるコマンドです。 コマンドラインからの使い方の例 カレントディレクトリのファイル一覧を表示する\nls ディレクトリ名を指定してそのディレクトリ内のファイル一覧を表示する\nls ディレクトリ名 ファイルの日時、所有者、権限などを含めて詳細なリストを表示する\nls -l 非表示ファイルも含めてすべてのファイルを表示する\nls -a ファイル名の先頭が\u0026rsquo;.\u0026rsquo;(小数点)のファイルは、通常非表示となりますが、\u0026rsquo;-a\u0026rsquo;オプションを使用することで表示されます。\nサブディレクトリ内のファイルも含めて表示する\nls -R ファイルの更新日時が新しい順に表示する\nls -t ファイルサイズを人間が読みやすい形式で表示する\nls -h ファイルサイズが大きい順に表示する\nls -S スクリプトからの使い方の例 ディレクトリ内のファイル名でループするスクリプト例 for file in $(ls ディレクトリ名); do echo \u0026#34;ファイル名:$file\u0026#34; done 注意点として、スペースや特殊文字が含まれるファイル名には対応していないため、そのような場合はls -Qを使ってエスケープされたファイル名を表示する必要があります。また、バッククオート(`)ではなく、$( )を使用した方がよいとされています。 ","date":"2023-04-14T23:30:14+09:00","permalink":"https://route250.github.io/p/ls%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/","title":"lsコマンドの使い方"},{"content":"日本語でかいてみるけども どれくらい？ できるかな\n","date":"2023-04-11T06:49:54+09:00","permalink":"https://route250.github.io/p/%E3%83%86%E3%82%B9%E3%83%88%E6%8A%95%E7%A8%BF/","title":"テスト投稿"}]